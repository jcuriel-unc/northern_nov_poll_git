title <-  strwrap(title, width = 60, simplify = FALSE)
title <- sapply(title, paste, collapse = "\n")
## subset
temp_df <- subset(final_data2allwB, novp_dk_yn1!= "No")
### need to search here for disagree
if(str_detect(unique(temp_df$temp_var)[1],"agree")==T){
temp_df$temp_var[temp_df$temp_var=="Strongly agree"] <- "Agree"
temp_df$temp_var[temp_df$temp_var=="Somewhat agree"] <- "Agree"
#temp_df$temp_var[grep("Don", temp_df$temp_var)] <- "Neither/Don't know"
temp_df$temp_var[temp_df$temp_var=="Strongly disagree"] <- "Disagree"
temp_df$temp_var[temp_df$temp_var=="Somewhat disagree"] <- "Disagree"
temp_df$temp_var[temp_df$temp_var!="Agree" & temp_df$temp_var!="Disagree"] <- "Neither/Don't know"
}
if(str_detect(temp_df$temp_var[1],"legal")==T){
temp_df$temp_var[temp_df$temp_var=="It should always be illegal"] <- "Illegal"
temp_df$temp_var[temp_df$temp_var=="It should always be legal"] <- "Legal"
temp_df$temp_var[temp_df$temp_var=="It should be mostly illegal"] <- "Illegal"
temp_df$temp_var[temp_df$temp_var=="It should be mostly legal"] <- "Legal"
}
###
testtab <- moe_topline(df = temp_df, variable =temp_var ,weight = final_weight)
testtab <- as.data.frame(testtab)
testtab <- testtab[,c(1,2,3,5)]
testtab[,2] <- round_preserve_sum(testtab[,2], 0)
testtab[,3] <- round_preserve_sum(testtab[,3], 0)
testtab[,4] <- round_preserve_sum(testtab[,4], 1)
#colnames(testtab)[1] <- "Response"
### get factor attr
testtab2 <- unnest(testtab, Response)
testtab2 <- as.data.frame(testtab2)
colnames(testtab2)[1] <- "Response"
## get rid of empty fields
testtab2 <- subset(testtab2, Response!="")
### now get the plot
temp_barplot <- ggplot(testtab2 ,aes(x=Response, y=Percent)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin=Percent-MOE, ymax=Percent+MOE), width=.2,
position=position_dodge(.9)) +
theme_minimal() + ggtitle(title) +
scale_x_discrete(labels = function(x)
stringr::str_wrap(x, width = 15)) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=0.25)) +
ggtitle(title)
### now save to pdf
## create names for plots and tables
table_temp <- paste0(temp_name,sep="_","table")
bar_temp <- paste0(temp_name,sep="_","barplot")
### command
temp_png_tab <- paste0("abortion",sep="/",table_temp,sep=".png")
temp_png_bar <- paste0("abortion",sep="/",bar_temp,sep=".png")
png(temp_png_tab, width=7,height=10,units="in", res=400)       # Export PNG as table
p<-tableGrob(testtab,rows=NULL)
grid.arrange(temp_barplot,p)
#grid::grid.text(title,x = (0.5), y = (0.8))
#grid.table(testtab, rows=NULL)
dev.off()
}
##### Drug attitude questions -- matrix  #####
### knowledge
nov_index <-  names(final_data2allwB)[grepl("drugat_ns",colnames(final_data2allwB))]
nov_q_items <- q_items[grep("drugat_ns",q_items$V1), ]
nrow(nov_q_items)==length(nov_index) # if true, good
### run a loop on these; might create a vector for the q_items
for (i in 1:length(nov_index)) {
final_data2allwB$temp_var <- final_data2allwB[colnames(final_data2allwB)==nov_index[i]]
### subset those who do not want to vote
### get title
temp_name <- colnames(final_data2allwB)[colnames(final_data2allwB)==nov_index[i]]
title = nov_q_items$V2[nov_q_items==nov_index[i]]
if(nov_index[i]=="mjiss_ns_sup"){
title="Do you support or oppose Issue 2?"
}
title <-  strwrap(title, width = 60, simplify = FALSE)
title <- sapply(title, paste, collapse = "\n")
title <- str_replace(title, "Waley", "Whaley")
title <- str_replace(title,"right direction", "right track" )
## subset
temp_df <- subset(final_data2allwB, temp_var!="")
### need to search here for disagree
if(str_detect(unique(temp_df$temp_var)[1],"agree")==T){
temp_df$temp_var[temp_df$temp_var=="Strongly agree"] <- "Agree"
temp_df$temp_var[temp_df$temp_var=="Somewhat agree"] <- "Agree"
#temp_df$temp_var[grep("Don", temp_df$temp_var)] <- "Neither/Don't know"
temp_df$temp_var[temp_df$temp_var=="Strongly disagree"] <- "Disagree"
temp_df$temp_var[temp_df$temp_var=="Somewhat disagree"] <- "Disagree"
temp_df$temp_var[temp_df$temp_var!="Agree" & temp_df$temp_var!="Disagree"] <- "Neither/Don't know"
}
###
testtab <- moe_topline(df = temp_df, variable  =temp_var ,weight = final_weight)
testtab <- as.data.frame(testtab)
testtab <- testtab[,c(1,2,3,5)]
testtab[,2] <- round_preserve_sum(testtab[,2], 0)
testtab[,3] <- round_preserve_sum(testtab[,3], 0)
testtab[,4] <- round_preserve_sum(testtab[,4], 1)
#colnames(testtab)[1] <- "Response"
### get factor attr
testtab2 <- unnest(testtab, Response)
testtab2 <- as.data.frame(testtab2)
colnames(testtab2)[1] <- "Response"
## get rid of empty fields
testtab2 <- subset(testtab2, Response!="")
## rearrange for drug attitude
testtab2$index <- 1
testtab2$index[testtab2$Response=="Somewhat knowledgeable"] <- 2
testtab2$index[testtab2$Response=="Knowledgeable"] <- 3
testtab2$index[testtab2$Response=="Very knowledgeable"] <- 4
## now arrange
testtab2 <- testtab2[order(testtab2$index), ]
testtab2 <- subset(testtab2, select=-c(index))
### now get the plot
temp_barplot <- ggplot(testtab2 ,aes(x=Response, y=Percent)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin=Percent-MOE, ymax=Percent+MOE), width=.2,
position=position_dodge(.9)) +
theme_minimal() + ggtitle(title) +
scale_x_discrete(labels = function(x)
stringr::str_wrap(x, width = 15)) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=0.25)) +
ggtitle(title)
### now save to pdf
## create names for plots and tables
table_temp <- paste0(temp_name,sep="_","table")
bar_temp <- paste0(temp_name,sep="_","barplot")
### command
temp_png_tab <- paste0("drugat",sep="/",table_temp,sep=".png")
temp_png_bar <- paste0("drugat",sep="/",bar_temp,sep=".png")
png(temp_png_tab, width=7,height=10,units="in", res=400)       # Export PNG as table
p<-tableGrob(testtab,rows=NULL)
grid.arrange(temp_barplot,p)
#grid::grid.text(title,x = (0.5), y = (0.8))
#grid.table(testtab, rows=NULL)
dev.off()
}
temp_barplot
##### Drug attitude questions -- matrix  #####
### knowledge
nov_index <-  names(final_data2allwB)[grepl("drugat_ns",colnames(final_data2allwB))]
nov_q_items <- q_items[grep("drugat_ns",q_items$V1), ]
nrow(nov_q_items)==length(nov_index) # if true, good
### run a loop on these; might create a vector for the q_items
for (i in 1:length(nov_index)) {
final_data2allwB$temp_var <- final_data2allwB[colnames(final_data2allwB)==nov_index[i]]
### subset those who do not want to vote
### get title
temp_name <- colnames(final_data2allwB)[colnames(final_data2allwB)==nov_index[i]]
title = nov_q_items$V2[nov_q_items==nov_index[i]]
if(nov_index[i]=="mjiss_ns_sup"){
title="Do you support or oppose Issue 2?"
}
title <-  strwrap(title, width = 60, simplify = FALSE)
title <- sapply(title, paste, collapse = "\n")
title <- str_replace(title, "Waley", "Whaley")
title <- str_replace(title,"right direction", "right track" )
## subset
temp_df <- subset(final_data2allwB, temp_var!="")
### need to search here for disagree
if(str_detect(unique(temp_df$temp_var)[1],"agree")==T){
temp_df$temp_var[temp_df$temp_var=="Strongly agree"] <- "Agree"
temp_df$temp_var[temp_df$temp_var=="Somewhat agree"] <- "Agree"
#temp_df$temp_var[grep("Don", temp_df$temp_var)] <- "Neither/Don't know"
temp_df$temp_var[temp_df$temp_var=="Strongly disagree"] <- "Disagree"
temp_df$temp_var[temp_df$temp_var=="Somewhat disagree"] <- "Disagree"
temp_df$temp_var[temp_df$temp_var!="Agree" & temp_df$temp_var!="Disagree"] <- "Neither/Don't know"
}
###
testtab <- moe_topline(df = temp_df, variable  =temp_var ,weight = final_weight)
testtab <- as.data.frame(testtab)
testtab <- testtab[,c(1,2,3,5)]
testtab[,2] <- round_preserve_sum(testtab[,2], 0)
testtab[,3] <- round_preserve_sum(testtab[,3], 0)
testtab[,4] <- round_preserve_sum(testtab[,4], 1)
#colnames(testtab)[1] <- "Response"
### get factor attr
testtab2 <- unnest(testtab, Response)
testtab2 <- as.data.frame(testtab2)
colnames(testtab2)[1] <- "Response"
## get rid of empty fields
testtab2 <- subset(testtab2, Response!="")
## rearrange for drug attitude
testtab2$index <- 1
testtab2$index[testtab2$Response=="Somewhat knowledgeable"] <- 2
testtab2$index[testtab2$Response=="Knowledgeable"] <- 3
testtab2$index[testtab2$Response=="Very knowledgeable"] <- 4
## now arrange
testtab2 <- testtab2[order(testtab2$index), ]
testtab2 <- subset(testtab2, select=-c(index))
### now get the plot
temp_barplot <- ggplot(testtab2 ,aes(x=Response, y=Percent)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin=Percent-MOE, ymax=Percent+MOE), width=.2,
position=position_dodge(.9)) +
theme_minimal() + ggtitle(title) +
scale_x_discrete(labels = function(x)
stringr::str_wrap(x, width = 15)) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=0.25)) +
ggtitle(title)
### now save to pdf
## create names for plots and tables
table_temp <- paste0(temp_name,sep="_","table")
bar_temp <- paste0(temp_name,sep="_","barplot")
### command
temp_png_tab <- paste0("drugat",sep="/",table_temp,sep=".png")
temp_png_bar <- paste0("drugat",sep="/",bar_temp,sep=".png")
png(temp_png_tab, width=7,height=10,units="in", res=400)       # Export PNG as table
p<-tableGrob(testtab,rows=NULL)
grid.arrange(temp_barplot,p)
#grid::grid.text(title,x = (0.5), y = (0.8))
#grid.table(testtab, rows=NULL)
dev.off()
}
###### drug legalization ####
nov_index <-  names(final_data2allwB)[grepl("drugat",colnames(final_data2allwB))]
nov_q_items <- q_items[grep("drugat",q_items$V1), ]
nrow(nov_q_items)==length(nov_index) # if true, good
drugatt_df <- data.frame()
for (i in 1:length(nov_index)) {
final_data2allwB$temp_var <- final_data2allwB[colnames(final_data2allwB)==nov_index[i]]
### subset those who do not want to vote
### get title
temp_name <- colnames(final_data2allwB)[colnames(final_data2allwB)==nov_index[i]]
title = nov_q_items$V2[i]
title <-  strwrap(title, width = 60, simplify = FALSE)
title <- sapply(title, paste, collapse = "\n")
## subset
temp_df <- subset(final_data2allwB, temp_var!="")
### reduce the categories
if(str_detect(nov_index[i],"know")){
temp_df$temp_var[temp_df$temp_var!="Not knowledgeable"] <- "Knowledgeable"
}
if(str_detect(temp_df$temp_var[1],"agree")==T){
temp_df$temp_var[temp_df$temp_var=="Strongly agree"] <- "Agree"
temp_df$temp_var[temp_df$temp_var=="Somewhat agree"] <- "Agree"
#temp_df$temp_var[grep("Don", temp_df$temp_var)] <- "Neither/Don't know"
temp_df$temp_var[temp_df$temp_var=="Strongly disagree"] <- "Disagree"
temp_df$temp_var[temp_df$temp_var=="Somewhat disagree"] <- "Disagree"
temp_df$temp_var[temp_df$temp_var!="Agree" & temp_df$temp_var!="Disagree"] <- "Neither/Don't know"
}
### moe command
testtab <- moe_topline(df = temp_df, variable  =temp_var ,weight = final_weight)
testtab <- as.data.frame(testtab)
## we will want to run round_preserve_sum() on the data
testtab[,2] <- round_preserve_sum(testtab[,2], 0)
testtab[,3] <- round_preserve_sum(testtab[,3], 0)
testtab[,5] <- round_preserve_sum(testtab[,5], 1)
## now, get the results subsetted, then save and test in the R markdown
reduced_tab <- testtab[,c(1:3,5)]
if(nrow(drugatt_df)==0){
drugatt_df <- reduced_tab
}else{
drugatt_df <- rbind(drugatt_df,reduced_tab )
}
}
# drugatt_df <- drugatt_df[,c(5,1:4)]
## now change name
drugatt_df <- unnest(drugatt_df, Response)
drugatt_df <- as.data.frame(drugatt_df)
colnames(drugatt_df)[1] <- "Response"
colnames(drugatt_df)[2] <- "Num"
colnames(drugatt_df)[3] <- "Pct"
## split
drug_know_df <- drugatt_df[1:24,]
drug_pref_df <- drugatt_df[25:60,]
### good, now export
saveRDS(drug_know_df,"drugat_tab/drug_know.rds")
output_dir <- file.path(main_dir, "drugat_tab")
if (!dir.exists(output_dir)){
dir.create(output_dir)
} else {
print("Dir already exists!")
}
if (!dir.exists(output_dir)){
dir.create(output_dir)
} else {
print("Dir already exists!")
}
## split
drug_know_df <- drugatt_df[1:24,]
drug_pref_df <- drugatt_df[25:60,]
### good, now export
saveRDS(drug_know_df,"drugat_tab/drug_know.rds")
saveRDS(drug_pref_df,"drugat_tab/drug_pref.rds")
nov_index <-  names(final_data2allwB)[grepl("primary",colnames(final_data2allwB))]
nov_index <- nov_index[!grepl("TEXT", nov_index)]
nov_q_items <- q_items[grep("primary",q_items$V1), ]
nov_q_items <- nov_q_items[!grepl("TEXT",nov_q_items$V1 ), ]
nrow(nov_q_items)==length(nov_index) # if true, good
## #fix primary interest
final_data2allwB$primary.interest[final_data2allwB$primary.interest=="I do not plan to vote in either the Democratic or Republican primary election"] <-
"I do not plan to vote in either"
final_data2allwB$primary.interest[final_data2allwB$primary.interest=="Yes, I plan to vote in the Democratic primary election"] <-
"Yes, I plan to vote in the Democratic primary"
final_data2allwB$primary.interest[final_data2allwB$primary.interest=="Yes, I plan to vote in the Republican primary election"] <-
"Yes, I plan to vote in the Republican primary"
### run a loop on these; might create a vector for the q_items
for (i in 1:length(nov_index)) {
final_data2allwB$temp_var <- final_data2allwB[colnames(final_data2allwB)==nov_index[i]]
### subset those who do not want to vote
### get title
temp_name <- colnames(final_data2allwB)[colnames(final_data2allwB)==nov_index[i]]
title = nov_q_items$V2[i]
if(nov_index[i]=="mjiss_ns_sup"){
title="Do you support or oppose Issue 2?"
}
title <-  strwrap(title, width = 60, simplify = FALSE)
title <- sapply(title, paste, collapse = "\n")
title <- str_replace(title, "Waley", "Whaley")
title <- str_replace(title,"right direction", "right track" )
## subset
temp_df <- subset(final_data2allwB, temp_var!="")
### need to search here for disagree
if(str_detect(unique(temp_df$temp_var)[1],"agree")==T){
temp_df$temp_var[temp_df$temp_var=="Strongly agree"] <- "Agree"
temp_df$temp_var[temp_df$temp_var=="Somewhat agree"] <- "Agree"
#temp_df$temp_var[grep("Don", temp_df$temp_var)] <- "Neither/Don't know"
temp_df$temp_var[temp_df$temp_var=="Strongly disagree"] <- "Disagree"
temp_df$temp_var[temp_df$temp_var=="Somewhat disagree"] <- "Disagree"
temp_df$temp_var[temp_df$temp_var!="Agree" & temp_df$temp_var!="Disagree"] <- "Neither/Don't know"
}
###
testtab <- moe_topline(df = temp_df, variable  =temp_var ,weight = final_weight)
testtab <- as.data.frame(testtab)
testtab <- testtab[,c(1,2,3,5)]
testtab[,2] <- round_preserve_sum(testtab[,2], 0)
testtab[,3] <- round_preserve_sum(testtab[,3], 0)
testtab[,4] <- round_preserve_sum(testtab[,4], 1)
#colnames(testtab)[1] <- "Response"
### get factor attr
testtab2 <- unnest(testtab, Response)
testtab2 <- as.data.frame(testtab2)
colnames(testtab2)[1] <- "Response"
## get rid of empty fields
testtab2 <- subset(testtab2, Response!="")
### now get the plot
temp_barplot <- ggplot(testtab2 ,aes(x=Response, y=Percent)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin=Percent-MOE, ymax=Percent+MOE), width=.2,
position=position_dodge(.9)) +
theme_minimal() + ggtitle(title) +
scale_x_discrete(labels = function(x)
stringr::str_wrap(x, width = 15)) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=0.25)) +
ggtitle(title)
### now save to pdf
## create names for plots and tables
table_temp <- paste0(temp_name,sep="_","table")
bar_temp <- paste0(temp_name,sep="_","barplot")
### command
temp_png_tab <- paste0("primary",sep="/",table_temp,sep=".png")
temp_png_bar <- paste0("primary",sep="/",bar_temp,sep=".png")
png(temp_png_tab, width=7,height=10,units="in", res=400)       # Export PNG as table
p<-tableGrob(testtab,rows=NULL)
grid.arrange(temp_barplot,p)
#grid::grid.text(title,x = (0.5), y = (0.8))
#grid.table(testtab, rows=NULL)
dev.off()
}
## make sure primary folder is present
output_dir <- file.path(main_dir, "primary")
if (!dir.exists(output_dir)){
dir.create(output_dir)
} else {
print("Dir already exists!")
}
##### Primary pivot questions #####
nov_index <-  names(final_data2allwB)[grepl("primary",colnames(final_data2allwB))]
nov_index <- nov_index[!grepl("TEXT", nov_index)]
nov_q_items <- q_items[grep("primary",q_items$V1), ]
nov_q_items <- nov_q_items[!grepl("TEXT",nov_q_items$V1 ), ]
nrow(nov_q_items)==length(nov_index) # if true, good
## #fix primary interest
final_data2allwB$primary.interest[final_data2allwB$primary.interest=="I do not plan to vote in either the Democratic or Republican primary election"] <-
"I do not plan to vote in either"
final_data2allwB$primary.interest[final_data2allwB$primary.interest=="Yes, I plan to vote in the Democratic primary election"] <-
"Yes, I plan to vote in the Democratic primary"
final_data2allwB$primary.interest[final_data2allwB$primary.interest=="Yes, I plan to vote in the Republican primary election"] <-
"Yes, I plan to vote in the Republican primary"
nov_index
### run a loop on these; might create a vector for the q_items
for (i in 1:length(nov_index)) {
final_data2allwB$temp_var <- final_data2allwB[colnames(final_data2allwB)==nov_index[i]]
### subset those who do not want to vote
### get title
temp_name <- colnames(final_data2allwB)[colnames(final_data2allwB)==nov_index[i]]
title = nov_q_items$V2[i]
if(nov_index[i]=="mjiss_ns_sup"){
title="Do you support or oppose Issue 2?"
}
title <-  strwrap(title, width = 60, simplify = FALSE)
title <- sapply(title, paste, collapse = "\n")
title <- str_replace(title, "Waley", "Whaley")
title <- str_replace(title,"right direction", "right track" )
## subset
temp_df <- subset(final_data2allwB, temp_var!="")
### need to search here for disagree
if(str_detect(unique(temp_df$temp_var)[1],"agree")==T){
temp_df$temp_var[temp_df$temp_var=="Strongly agree"] <- "Agree"
temp_df$temp_var[temp_df$temp_var=="Somewhat agree"] <- "Agree"
#temp_df$temp_var[grep("Don", temp_df$temp_var)] <- "Neither/Don't know"
temp_df$temp_var[temp_df$temp_var=="Strongly disagree"] <- "Disagree"
temp_df$temp_var[temp_df$temp_var=="Somewhat disagree"] <- "Disagree"
temp_df$temp_var[temp_df$temp_var!="Agree" & temp_df$temp_var!="Disagree"] <- "Neither/Don't know"
}
###
testtab <- moe_topline(df = temp_df, variable  =temp_var ,weight = final_weight)
testtab <- as.data.frame(testtab)
testtab <- testtab[,c(1,2,3,5)]
testtab[,2] <- round_preserve_sum(testtab[,2], 0)
testtab[,3] <- round_preserve_sum(testtab[,3], 0)
testtab[,4] <- round_preserve_sum(testtab[,4], 1)
#colnames(testtab)[1] <- "Response"
### get factor attr
testtab2 <- unnest(testtab, Response)
testtab2 <- as.data.frame(testtab2)
colnames(testtab2)[1] <- "Response"
## get rid of empty fields
testtab2 <- subset(testtab2, Response!="")
### now get the plot
temp_barplot <- ggplot(testtab2 ,aes(x=Response, y=Percent)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin=Percent-MOE, ymax=Percent+MOE), width=.2,
position=position_dodge(.9)) +
theme_minimal() + ggtitle(title) +
scale_x_discrete(labels = function(x)
stringr::str_wrap(x, width = 15)) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=0.25)) +
ggtitle(title)
### now save to pdf
## create names for plots and tables
table_temp <- paste0(temp_name,sep="_","table")
bar_temp <- paste0(temp_name,sep="_","barplot")
### command
temp_png_tab <- paste0("primary",sep="/",table_temp,sep=".png")
temp_png_bar <- paste0("primary",sep="/",bar_temp,sep=".png")
png(temp_png_tab, width=7,height=10,units="in", res=400)       # Export PNG as table
p<-tableGrob(testtab,rows=NULL)
grid.arrange(temp_barplot,p)
#grid::grid.text(title,x = (0.5), y = (0.8))
#grid.table(testtab, rows=NULL)
dev.off()
}
##### Now trump related questions ####
nov_index <-  names(final_data2allwB)[grepl("trump",colnames(final_data2allwB))]
nov_index <- nov_index[!grepl("favorability_trump", nov_index)]
nov_q_items <- q_items[grep("trump",q_items$V1), ]
nov_q_items <- nov_q_items[!grepl("favorability_trump",nov_q_items$V1 ), ]
nrow(nov_q_items)==length(nov_index) # if true, good
### run a loop on these; might create a vector for the q_items
for (i in 1:length(nov_index)) {
final_data2allwB$temp_var <- final_data2allwB[colnames(final_data2allwB)==nov_index[i]]
### subset those who do not want to vote
### get title
temp_name <- colnames(final_data2allwB)[colnames(final_data2allwB)==nov_index[i]]
title = nov_q_items$V2[nov_q_items==nov_index[i]]
title <-  strwrap(title, width = 60, simplify = FALSE)
title <- sapply(title, paste, collapse = "\n")
## subset
temp_df <- subset(final_data2allwB, temp_var!="")
### need to search here for disagree
if(str_detect(unique(temp_df$temp_var)[1],"likely")==T){
temp_df$temp_var[temp_df$temp_var=="Very likely"] <- "Likely"
temp_df$temp_var[temp_df$temp_var=="Likely"] <- "Likely"
#temp_df$temp_var[grep("Don", temp_df$temp_var)] <- "Neither/Don't know"
temp_df$temp_var[temp_df$temp_var=="Unlikely"] <- "Unlikely"
temp_df$temp_var[temp_df$temp_var=="Very unlikely"] <- "Unlikely"
temp_df$temp_var[temp_df$temp_var!="Likely" & temp_df$temp_var!="Unlikely"] <- "Not sure"
}
###
testtab <- moe_topline(df = temp_df, variable  =temp_var ,weight = final_weight)
testtab <- as.data.frame(testtab)
testtab <- testtab[,c(1,2,3,5)]
testtab[,2] <- round_preserve_sum(testtab[,2], 0)
testtab[,3] <- round_preserve_sum(testtab[,3], 0)
testtab[,4] <- round_preserve_sum(testtab[,4], 1)
#colnames(testtab)[1] <- "Response"
### get factor attr
testtab2 <- unnest(testtab, Response)
testtab2 <- as.data.frame(testtab2)
colnames(testtab2)[1] <- "Response"
## get rid of empty fields
testtab2 <- subset(testtab2, Response!="")
### now get the plot
temp_barplot <- ggplot(testtab2 ,aes(x=Response, y=Percent)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(aes(ymin=Percent-MOE, ymax=Percent+MOE), width=.2,
position=position_dodge(.9)) +
theme_minimal() + ggtitle(title) +
scale_x_discrete(labels = function(x)
stringr::str_wrap(x, width = 15)) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5, hjust=0.25)) +
ggtitle(title)
### now save to pdf
## create names for plots and tables
table_temp <- paste0(temp_name,sep="_","table")
bar_temp <- paste0(temp_name,sep="_","barplot")
testtab2$Response <- sapply(lapply(testtab2$Response, strwrap, width=50), paste, collapse="\n")
### command
temp_png_tab <- paste0("trump",sep="/",table_temp,sep=".png")
temp_png_bar <- paste0("trump",sep="/",bar_temp,sep=".png")
png(temp_png_tab, width=7,height=10,units="in", res=400)       # Export PNG as table
p<-tableGrob(testtab2,rows=NULL)
grid.arrange(temp_barplot,p)
#grid::grid.text(title,x = (0.5), y = (0.8))
#grid.table(testtab, rows=NULL)
dev.off()
}
##### Senate Match Ups #####
nov_index <-  names(final_data2allwB)[grepl("Senate",colnames(final_data2allwB))]
nov_index <- nov_index[!grepl("TEXT", nov_index)]
nov_q_items <- q_items[grep("Senate",q_items$V1), ]
nov_q_items <- nov_q_items[!grepl("TEXT",nov_q_items$V1 ), ]
nrow(nov_q_items)==length(nov_index) # if true, good
nov_index
